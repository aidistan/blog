require "stringex" # For String#to_url

task :default => 'serve:default'

namespace :serve do
  desc "Run the server"
  task :default do
    system("bundle exec jekyll serve --baseurl '' -w")
  end

  # serve with drafts
  desc "Run the server with drafts"
  task :with_drafts do
    system("bundle exec jekyll serve --baseurl '' -w -D")
  end
end

namespace :new do
  desc "Create a new post in _posts"
  task :post do
    title = get_stdin("Enter a title for your post: ")
    filename = "_posts/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.md"
    if File.exist?(filename)
      abort("rake aborted!") unless ask("#{filename} already exists. Do you want to overwrite?", ['y', 'N']) == 'y'
    end
    puts "Creating new post: #{filename}"
    rtn = <<-END_OF_DOC
---
layout: post
title: \"#{title.gsub(/&/,'&amp;')}\"
description: \"\"
modified: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}
tags: []
image:
  feature:
  credit:
  creditlink:
comments: post-#{Time.now.strftime('%Y%m%d')}
link:
---
    END_OF_DOC
    File.open(filename, 'w').puts rtn
  end

  desc "Create a new note in _notes"
  task :note do
    title = get_stdin("Enter a title for your note: ")
    filename = "_notes/#{title.to_url}.md"
    if File.exist?(filename)
      abort("rake aborted!") unless ask("#{filename} already exists. Do you want to overwrite?", ['y', 'N']) == 'y'
    end
    puts "Creating new post: #{filename}"
    rtn = <<-END_OF_DOC
---
layout:   note
title:    \"#{title.gsub(/&/,'&amp;')}\"
date:     #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}
modified: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}
mathjax:
---
    END_OF_DOC
    File.open(filename, 'w').puts rtn
  end

  desc "Create a new convict dairy in _convicts"
  task :convict do
    title = get_stdin("Enter the date of your convict: [2014-11-18]")
    filename = "_convicts/#{title.to_url}.md"
    if File.exist?(filename)
      abort("rake aborted!") unless ask("#{filename} already exists. Do you want to overwrite?", ['y', 'N']) == 'y'
    end
    puts "Creating new convict: #{filename}"
    File.open(filename, 'w').puts "---\n---\n"
    system("atom #{filename}")
  end

  desc "Create a new page"
  task :page do
    title = get_stdin("Enter a title for your page: ")
    filename = "#{title.to_url}.html"
    if File.exist?(filename)
      abort("rake aborted!") unless ask("#{filename} already exists. Do you want to overwrite?", ['y', 'N']) == 'y'
    end
    puts "Creating new page: #{filename}"
    rtn = <<-END_OF_DOC
---
layout: page
permalink: /#{title.to_url}/
title: \"#{title}\"
description:
image:
  feature:
  credit:
  creditlink:
comments: page-#{title.to_url}
---
    END_OF_DOC
    File.open(filename, 'w').puts rtn
  end
end

def get_stdin(message)
  print message
  STDIN.gets.chomp
end

def ask(message, valid_options)
  if valid_options
    answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')} ") while !valid_options.include?(answer)
  else
    answer = get_stdin(message)
  end
  answer
end
